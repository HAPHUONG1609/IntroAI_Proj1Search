import heapq
import queue


class Node:
    def __init__(self, state, cost=0, parent=None):
        self.state = state 
        self.cost = cost    
        self.parent = parent  
    def __lt__(self, other):
        return self.cost < other.cost


def ucs(start_state, goal_state, graph):
    queue = []
    heapq.heappush(queue, Node(start_state, 0))
    visited = set()
    while queue:
        current_node = heapq.heappop(queue)
        if current_node.state == goal_state:
            return construct_solution_path(current_node)
        if current_node.state in visited:
            continue
        visited.add(current_node.state)
        for next, cost in graph[current_node.state]:
            if next not in visited:
                new_cost = current_node.cost + cost
                new_node = Node(next, new_cost, current_node)
                heapq.heappush(queue, new_node)
    return None  


def construct_solution_path(state):
    path = []
    while node:
        path.append(state)
        state = state.parent
    path.reverse()
    return path
